class EmotionService {
  constructor() {
    // Emotion keywords and their intensity scores
    this.emotionKeywords = {
      joy: {
        keywords: ['happy', 'joy', 'excited', 'wonderful', 'amazing', 'fantastic', 'great', 'excellent', 'delighted', 'thrilled', 'ecstatic', 'elated', 'cheerful', 'jubilant', 'euphoric'],
        intensity: 0.8
      },
      sadness: {
        keywords: ['sad', 'depressed', 'miserable', 'unhappy', 'sorrowful', 'melancholy', 'gloomy', 'heartbroken', 'devastated', 'despair', 'hopeless', 'dejected'],
        intensity: 0.7
      },
      anger: {
        keywords: ['angry', 'furious', 'enraged', 'irritated', 'annoyed', 'frustrated', 'outraged', 'livid', 'incensed', 'fuming', 'mad', 'hostile', 'aggressive'],
        intensity: 0.8
      },
      fear: {
        keywords: ['afraid', 'scared', 'terrified', 'frightened', 'anxious', 'worried', 'nervous', 'panicked', 'horrified', 'dread', 'apprehensive', 'fearful'],
        intensity: 0.7
      },
      surprise: {
        keywords: ['surprised', 'shocked', 'astonished', 'amazed', 'stunned', 'bewildered', 'startled', 'dumbfounded', 'flabbergasted', 'incredible', 'unbelievable'],
        intensity: 0.6
      },
      disgust: {
        keywords: ['disgusted', 'revolted', 'repulsed', 'sickened', 'nauseated', 'appalled', 'horrified', 'offended', 'disturbed', 'gross', 'vile'],
        intensity: 0.6
      },
      trust: {
        keywords: ['trust', 'confident', 'reliable', 'secure', 'safe', 'trustworthy', 'faithful', 'loyal', 'dependable', 'assured', 'certain'],
        intensity: 0.5
      },
      anticipation: {
        keywords: ['excited', 'eager', 'looking forward', 'anticipate', 'expect', 'hope', 'optimistic', 'enthusiastic', 'keen', 'ready'],
        intensity: 0.6
      },
      neutral: {
        keywords: ['okay', 'fine', 'normal', 'usual', 'standard', 'regular', 'typical', 'average', 'moderate', 'balanced'],
        intensity: 0.3
      }
    };

    // Language-specific emotion keywords
    this.languageEmotions = {
      hi: {
        joy: ['рдЦреБрд╢', 'рдЖрдирдВрдж', 'рдкреНрд░рд╕рдиреНрди', 'рдЙрддреНрд╕рд╛рд╣рд┐рдд', 'рдордЬрд╝реЗрджрд╛рд░', 'рд╢рд╛рдирджрд╛рд░', 'рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛'],
        sadness: ['рджреБрдЦреА', 'рдЙрджрд╛рд╕', 'рдирд┐рд░рд╛рд╢', 'рджреБрдЦ', 'рджрд░реНрдж', 'рдЕрдлрд╕реЛрд╕', 'рдЦреЗрдж'],
        anger: ['рдЧреБрд╕реНрд╕рд╛', 'рдХреНрд░реЛрдз', 'рдирд╛рд░рд╛рдЬ', 'рдЪрд┐рдврд╝', 'рдХреНрд░реЛрдзрд┐рдд', 'рдЖрдХреНрд░реЛрд╢'],
        fear: ['рдбрд░', 'рднрдп', 'рдЪрд┐рдВрддрд╛', 'рдЖрд╢рдВрдХрд╛', 'рднрдпрднреАрдд', 'рдШрдмрд░рд╛рд╣рдЯ'],
        surprise: ['рдЖрд╢реНрдЪрд░реНрдп', 'рд╣реИрд░рд╛рди', 'рдЪреМрдВрдХ', 'рдЕрдЪрд░рдЬ', 'рд╡рд┐рд╕реНрдордп'],
        trust: ['рд╡рд┐рд╢реНрд╡рд╛рд╕', 'рднрд░реЛрд╕рд╛', 'рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕', 'рд╕реБрд░рдХреНрд╖рд┐рдд'],
        neutral: ['рдареАрдХ', 'рд╕рд╛рдорд╛рдиреНрдп', 'рд╕рд╛рдзрд╛рд░рдг', 'рдордзреНрдпрдо']
      },
      bn: {
        joy: ['рж╕рзБржЦрзА', 'ржЖржиржирзНржжрж┐ржд', 'ржЙрждрзНрждрзЗржЬрж┐ржд', 'ржоржЬрж╛рж░', 'ржжрж╛рж░рзБржг', 'ржЪржорзОржХрж╛рж░'],
        sadness: ['ржжрзБржГржЦрзА', 'ржмрж┐рж╖ржгрзНржг', 'ржирж┐рж░рж╛рж╢', 'ржжрзБржГржЦ', 'ржмрзНржпржерж╛', 'ржЦрзЗржж'],
        anger: ['рж░рж╛ржЧ', 'ржХрзНрж░рзЛржз', 'ржирж╛ржЦрзЛрж╢', 'ржмрж┐рж░ржХрзНржд', 'ржХрзНрж░рзБржжрзНржз'],
        fear: ['ржнржпрж╝', 'ржЖрж╢ржЩрзНржХрж╛', 'ржЪрж┐ржирзНрждрж╛', 'ржнрзАржд', 'ржЖрждржЩрзНржХ'],
        surprise: ['ржмрж┐рж╕рзНржоржпрж╝', 'рж╣рждржмрж╛ржХ', 'ржЪржоржХ', 'ржЖрж╢рзНржЪрж░рзНржп'],
        trust: ['ржмрж┐рж╢рзНржмрж╛рж╕', 'ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕', 'ржирж┐рж░рж╛ржкржж'],
        neutral: ['ржарж┐ржХ', 'рж╕рж╛ржзрж╛рж░ржг', 'ржорж╛ржЭрж╛рж░рж┐']
      },
      ta: {
        joy: ['роороХро┐ро┤рпНроЪрпНроЪро┐', 'роЪроирпНродрпЛро╖роорпН', 'роЖро░рпНро╡роорпН', 'роЪро┐ро▒роирпНрод', 'роЕро░рпБроорпИ', 'роиройрпНро▒рпБ'],
        sadness: ['ро╡ро░рпБродрпНродроорпН', 'роЪрпЛроХроорпН', 'роироорпНрокро┐роХрпНроХрпИропро▒рпНро▒', 'родрпБроХрпНроХроорпН', 'ро╡рпЗродройрпИ'],
        anger: ['роХрпЛрокроорпН', 'роЪро┐ройроорпН', 'роОро░ро┐роЪрпНроЪро▓рпН', 'роХрпЛрокрооро╛роХ', 'ро╡рпЖро▒рпБрокрпНрокрпБ'],
        fear: ['рокропроорпН', 'роЕроЪрпНроЪроорпН', 'роХро╡ро▓рпИ', 'рокропроирпНрод', 'рокродроЯрпНроЯроорпН'],
        surprise: ['роЖроЪрпНроЪро░ро┐ропроорпН', 'родро┐роХрпИрокрпНрокрпБ', 'ро╡ро┐ропрокрпНрокрпБ', 'роЕродро┐ро░рпНроЪрпНроЪро┐'],
        trust: ['роироорпНрокро┐роХрпНроХрпИ', 'роироорпНрокрпБродро▓рпН', 'рокро╛родрпБроХро╛рокрпНрокрпБ'],
        neutral: ['роЪро░ро┐', 'роЪро╛родро╛ро░рог', 'рооро┐родрооро╛рой']
      }
    };
  }

  /**
   * Detect emotion in text
   * @param {string} text - Text to analyze
   * @param {string} language - Language code
   * @returns {Object} Emotion analysis result
   */
  detectEmotion(text, language = 'en') {
    try {
      if (!text || !text.trim()) {
        return {
          primaryEmotion: 'neutral',
          confidence: 1.0,
          emotions: { neutral: 1.0 },
          wordMapping: []
        };
      }

      const words = text.toLowerCase().split(/\s+/);
      const emotionScores = {};
      const wordMapping = [];

      // Initialize emotion scores
      Object.keys(this.emotionKeywords).forEach(emotion => {
        emotionScores[emotion] = 0;
      });

      // Check each word for emotions
      words.forEach((word, index) => {
        const cleanWord = word.replace(/[^\w]/g, '');
        if (!cleanWord) return;

        let wordEmotion = 'neutral';
        let maxScore = 0;

        // Check English emotions
        Object.entries(this.emotionKeywords).forEach(([emotion, data]) => {
          if (data.keywords.some(keyword => cleanWord.includes(keyword) || keyword.includes(cleanWord))) {
            const score = data.intensity;
            emotionScores[emotion] += score;
            if (score > maxScore) {
              maxScore = score;
              wordEmotion = emotion;
            }
          }
        });

        // Check language-specific emotions
        if (this.languageEmotions[language]) {
          Object.entries(this.languageEmotions[language]).forEach(([emotion, keywords]) => {
            if (keywords.some(keyword => cleanWord.includes(keyword) || keyword.includes(cleanWord))) {
              const score = this.emotionKeywords[emotion]?.intensity || 0.5;
              emotionScores[emotion] += score;
              if (score > maxScore) {
                maxScore = score;
                wordEmotion = emotion;
              }
            }
          });
        }

        // Add word mapping
        wordMapping.push({
          word: word,
          index: index,
          emotion: wordEmotion,
          confidence: maxScore
        });
      });

      // Find primary emotion
      let primaryEmotion = 'neutral';
      let maxScore = 0;

      Object.entries(emotionScores).forEach(([emotion, score]) => {
        if (score > maxScore) {
          maxScore = score;
          primaryEmotion = emotion;
        }
      });

      // Calculate confidence
      const totalScore = Object.values(emotionScores).reduce((sum, score) => sum + score, 0);
      const confidence = totalScore > 0 ? maxScore / totalScore : 1.0;

      // Normalize emotion scores
      const normalizedEmotions = {};
      Object.entries(emotionScores).forEach(([emotion, score]) => {
        normalizedEmotions[emotion] = totalScore > 0 ? score / totalScore : 0;
      });

      return {
        primaryEmotion,
        confidence,
        emotions: normalizedEmotions,
        wordMapping
      };

    } catch (error) {
      console.error('Emotion detection error:', error);
      return {
        primaryEmotion: 'neutral',
        confidence: 1.0,
        emotions: { neutral: 1.0 },
        wordMapping: []
      };
    }
  }

  /**
   * Get emotion color for UI
   * @param {string} emotion - Emotion name
   * @returns {string} CSS color
   */
  getEmotionColor(emotion) {
    const emotionColors = {
      joy: '#FFD700',      // Gold
      sadness: '#4682B4',  // Steel Blue
      anger: '#DC143C',    // Crimson
      fear: '#8B4513',     // Saddle Brown
      surprise: '#FF69B4', // Hot Pink
      disgust: '#228B22',  // Forest Green
      trust: '#4169E1',    // Royal Blue
      anticipation: '#FF8C00', // Dark Orange
      neutral: '#808080'   // Gray
    };

    return emotionColors[emotion] || '#808080';
  }

  /**
   * Get emotion icon for UI
   * @param {string} emotion - Emotion name
   * @returns {string} Icon name
   */
  getEmotionIcon(emotion) {
    const emotionIcons = {
      joy: 'ЁЯШК',
      sadness: 'ЁЯШв',
      anger: 'ЁЯШа',
      fear: 'ЁЯШи',
      surprise: 'ЁЯШ▓',
      disgust: 'ЁЯдв',
      trust: 'ЁЯдЭ',
      anticipation: 'ЁЯдЧ',
      neutral: 'ЁЯШР'
    };

    return emotionIcons[emotion] || 'ЁЯШР';
  }

  /**
   * Get emotion description
   * @param {string} emotion - Emotion name
   * @returns {string} Description
   */
  getEmotionDescription(emotion) {
    const descriptions = {
      joy: 'Happy and positive',
      sadness: 'Sad or melancholic',
      anger: 'Angry or frustrated',
      fear: 'Scared or anxious',
      surprise: 'Surprised or shocked',
      disgust: 'Disgusted or repulsed',
      trust: 'Trusting or confident',
      anticipation: 'Excited or eager',
      neutral: 'Neutral or calm'
    };

    return descriptions[emotion] || 'Neutral';
  }
}

module.exports = EmotionService; 